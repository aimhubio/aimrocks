name: aimrocks packaging pipeline

on: workflow_dispatch

jobs:
  linux-dist:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        manylinux-version: [ 'manylinux1_x86_64', 'manylinux2010_x86_64', 'manylinux_2_24_x86_64' ]
    name: Linux wheels build (using Docker) ${{ matrix.manylinux-version }}
    steps:
      - name: Install Docker & images
        run: |
          apt update && apt install -y docker.io
          sudo systemctl enable --now docker

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: x64

      - name: Pull Docker Images
        run: |
         docker pull quay.io/pypa/${{ matrix.manylinux-version }}

      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true


      - name: Building dependencies for ${{ matrix.manylinux-version }}
        run: |
         docker build \
         --build-arg FROM=quay.io/pypa/${{ matrix.manylinux-version }} \
         --target deps .

      - name: Building rocksdb for ${{ matrix.manylinux-version }}
        run: |
         docker build \
         --build-arg FROM=quay.io/pypa/${{ matrix.manylinux-version }} \
         --target rocksdb .

      - name: Building wheels for ${{ matrix.manylinux-version }}
        run: |
         docker build \
         --build-arg FROM=quay.io/pypa/${{ matrix.manylinux-version }} \
         --target wheels . \
         -t aimhubio/aimrocks:${{ matrix.manylinux-version }}

      - name: Auditing wheels for ${{ matrix.manylinux-version }}
        run: |
         mkdir -p manylinux_dist/ && \
         docker run --rm \
         --mount type=bind,source=$PWD/manylinux_dist,target=/opt/aimrocks/manylinux_dist \
         aimhubio/aimrocks:${{ matrix.manylinux-version }} \
         bash -e /opt/aimrocks/docker/audit-wheels.sh

      - name: Install dev dependencies
        run: |
          python -m pip install -r requirements.dev.txt

      - name: Publish wheels
        env:
          PYPI_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          python -m twine upload -u __token__ -p "${PYPI_PASSWORD}" manylinux_dist/*

  macos-dist:
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
        os: [ 'macos-latest' ]
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }} build
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.14
    steps:
      - name: Building ZLib
        run: |
          # zlib
          curl -L https://www.zlib.net/fossils/zlib-1.2.11.tar.gz -o zlib-1.2.11.tar.gz
          tar -xzf zlib-1.2.11.tar.gz
          cd zlib-1.2.11/
          ./configure
          make CFLAGS="-fPIC" CXXFLAGS="-fPIC"
          make install
          cd ../
          rm -rf zlib-1.2.11 zlib-1.2.11.tar.gz

      - name: Building BZip2
        run: |
          # bzip2
          # curl https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz -o bzip2-1.0.8.tar.gz
          # tar zxvf bzip2-1.0.8.tar.gz
          # cd bzip2-1.0.8/
          # make CFLAGS="-fPIC" CXXFLAGS="-fPIC"
          # make -f Makefile-libbz2_so CFLAGS="-fPIC" CXXFLAGS="-fPIC"
          # make -n install
          # cd ../
          # rm -rf bzip2-1.0.8 bzip2-1.0.8.tar.gz

      - name: Building Snappy
        run: |
          # snappy
          curl -L https://github.com/google/snappy/archive/1.1.8.tar.gz -o snappy-1.1.8.tar.gz
          tar zxvf snappy-1.1.8.tar.gz
          cd snappy-1.1.8
          mkdir build
          cd build
          cmake CFLAGS="-fPIC" CXXFLAGS="fPIC" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_SHARED_LIBS=ON ..
          make
          make install
          cd ../..
          rm -rf snappy-1.1.8 snappy-1.1.8.tar.gz

      - name: Building RocksDB
        run: |
          # rocksdb
          curl -L https://github.com/facebook/rocksdb/archive/6.29.fb.tar.gz -o rocksdb-6.29.fb.tar.gz
          tar zxvf rocksdb-6.29.fb.tar.gz
          cd rocksdb-6.29.fb
          PORTABLE=1 make shared_lib EXTRA_CXXFLAGS="-fPIC" EXTRA_CFLAGS="-fPIC" USE_RTTI=0 DEBUG_LEVEL=0 -j4
          strip -S librocksdb.dylib
          PORTABLE=1 make DEBUG_LEVEL=0 install-shared
          cp librocksdb.6.29.3.dylib /usr/local/lib/librocksdb.dylib
          rm /usr/local/lib/librocksdb.*.dylib
          cd ..
          rm -rf rocksdb-6.29.fb rocksdb-6.29.fb.tar.gz

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install dev dependencies
        run: |
          python -m pip install -r requirements.dev.txt

      - name: Build bdist wheel
        run: |
          # python setup.py bdist_wheel -d dist --plat-name=macosx_12_0_x86_64
          # python setup.py bdist_wheel -d dist --plat-name=macosx_11_0_x86_64
          python setup.py bdist_wheel -d dist --plat-name=macosx_10_14_x86_64

      - name: Test bdist
        run: |
          python -m pip install dist/*.whl
          python -m pytest tests
          python -m pip uninstall -y aimrocks

      - name: Publish wheel
        env:
          PYPI_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          python -m twine upload -u __token__ -p "${PYPI_PASSWORD}" dist/*
